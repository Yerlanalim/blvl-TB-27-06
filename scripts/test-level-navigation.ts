#!/usr/bin/env tsx

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º BizLevel
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ level-1
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testGetLevelBasedNavigation(uid: string) {
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–≥–∞–º–∏
  const currentQuestion = await prisma.questions.findUnique({
    where: { uid },
    select: {
      uid: true,
      slug: true,
      createdAt: true,
      questionType: true,
      tags: {
        select: {
          tag: {
            select: {
              name: true
            }
          }
        }
      }
    },
  });

  if (!currentQuestion) return null;

  // –ù–∞–π—Ç–∏ —Ç–µ–≥–∏ —É—Ä–æ–≤–Ω—è (level-1, level-2, etc.)
  const levelTags = currentQuestion.tags
    .map(t => t.tag.name)
    .filter(name => name.startsWith('level-'));

  if (levelTags.length === 0) {
    return null;
  }

  const levelTag = levelTags[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ —É—Ä–æ–≤–Ω—è

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ createdAt
  const levelQuestions = await prisma.questions.findMany({
    where: {
      tags: {
        some: {
          tag: {
            name: levelTag
          }
        }
      }
    },
    select: {
      uid: true,
      slug: true,
      createdAt: true,
      questionType: true,
      title: true,
      tags: {
        select: {
          tag: {
            select: {
              name: true
            }
          }
        }
      }
    },
    orderBy: {
      createdAt: 'asc'
    }
  });

  // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const currentIndex = levelQuestions.findIndex(q => q.uid === uid);
  if (currentIndex === -1) return null;

  // –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
  const nextQuestion = currentIndex < levelQuestions.length - 1 ? levelQuestions[currentIndex + 1] : null;
  const previousQuestion = currentIndex > 0 ? levelQuestions[currentIndex - 1] : null;

  // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  const progress = {
    current: currentIndex + 1,
    total: levelQuestions.length,
    level: levelTag,
    percentage: Math.round(((currentIndex + 1) / levelQuestions.length) * 100)
  };

  return {
    nextQuestion: nextQuestion?.slug || null,
    previousQuestion: previousQuestion?.slug || null,
    progress
  };
}

async function testLevelNavigation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ level-1...')
  console.log('='.repeat(50))
  
  try {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã level-1
    const level1Questions = await prisma.questions.findMany({
      where: {
        tags: {
          some: {
            tag: {
              name: 'level-1'
            }
          }
        }
      },
      include: {
        tags: {
          include: {
            tag: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    })

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${level1Questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ level-1`)
    console.log()

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    for (let i = 0; i < level1Questions.length; i++) {
      const question = level1Questions[i]
      const navigation = await testGetLevelBasedNavigation(question.uid)
      
      console.log(`${i + 1}. ${question.title}`)
      console.log(`   –¢–∏–ø: ${question.questionType}`)
      console.log(`   Slug: ${question.slug}`)
      
      if (navigation) {
        console.log(`   ‚¨ÖÔ∏è  –ü—Ä–µ–¥—ã–¥—É—â–∏–π: ${navigation.previousQuestion || '–Ω–µ—Ç'}`)
        console.log(`   ‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π: ${navigation.nextQuestion || '–Ω–µ—Ç'}`)
        
        if (navigation.progress) {
          console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${navigation.progress.current}/${navigation.progress.total} (${navigation.progress.percentage}%)`)
        }
      } else {
        console.log(`   ‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
      }
      
      console.log()
    }

    console.log('='.repeat(50))
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:')
    console.error(error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

testLevelNavigation() 