import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function linkTagsToQuestions() {
  console.log('üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ level-1...')
  
  try {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏
    const tags = await prisma.tag.findMany({
      where: {
        name: {
          in: ['level-1', 'business-basics', 'goal-setting', 'video-lesson', 'test']
        }
      }
    })
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤:', tags.length)
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã level-1
    const questions = await prisma.questions.findMany({
      where: {
        slug: {
          in: [
            'welcome-to-business',
            'business-model-intro', 
            'business-models-test-1',
            'smart-goals-video',
            'smart-goals-test', 
            'target-audience-video',
            'level-1-final-test'
          ]
        }
      }
    })
    
    console.log('üìù –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', questions.length)
    
    // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Ç–µ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const tagMap = new Map(tags.map(tag => [tag.name, tag.uid]))
    
    // –°–≤—è–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–µ–≥–∞–º–∏
    for (const question of questions) {
      const questionTags: string[] = []
      
      // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–∞—é—Ç —Ç–µ–≥ level-1
      questionTags.push('level-1')
      
      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –ø–æ slug
      if (['welcome-to-business', 'business-model-intro', 'business-models-test-1', 
           'target-audience-video', 'level-1-final-test'].includes(question.slug || '')) {
        questionTags.push('business-basics')
      }
      
      if (['smart-goals-video', 'smart-goals-test'].includes(question.slug || '')) {
        questionTags.push('goal-setting')
      }
      
      if (['business-model-intro', 'smart-goals-video', 'target-audience-video'].includes(question.slug || '')) {
        questionTags.push('video-lesson')
      }
      
      if (['business-models-test-1', 'smart-goals-test', 'level-1-final-test'].includes(question.slug || '')) {
        questionTags.push('test')
      }
      
      // –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∏
      for (const tagName of questionTags) {
        const tagUid = tagMap.get(tagName)
        if (tagUid) {
          try {
            await prisma.questionTags.create({
              data: {
                questionId: question.uid,
                tagId: tagUid
              }
            })
            console.log(`‚úÖ –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞: ${question.slug} -> ${tagName}`)
          } catch (error: any) {
            if (error.code === 'P2002') {
              // –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              console.log(`‚ö†Ô∏è –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${question.slug} -> ${tagName}`)
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ ${question.slug} -> ${tagName}:`, error.message)
            }
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:')
    const questionsWithTags = await prisma.questions.findMany({
      where: {
        slug: {
          in: [
            'welcome-to-business',
            'business-model-intro', 
            'business-models-test-1',
            'smart-goals-video',
            'smart-goals-test', 
            'target-audience-video',
            'level-1-final-test'
          ]
        }
      },
      include: {
        tags: {
          include: {
            tag: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    })
    
    for (const question of questionsWithTags) {
      const tagNames = question.tags.map(qt => qt.tag.name).sort()
      console.log(`${question.slug}: [${tagNames.join(', ')}]`)
    }
    
    console.log('\nüéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

linkTagsToQuestions() 