import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–µ–π 2‚Äì10: –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
const levelsInfo = [
  { number: 2, title: '–≠–∫—Å–ø—Ä–µ—Å—Å-—Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', description: '1‚Äì2 —Ç–µ—Ö–Ω–∏–∫–∏ —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –±—ã—Å—Ç—Ä—ã–µ –º–∏–Ω–∏-–ø–µ—Ä–µ—Ä—ã–≤—ã' },
  { number: 3, title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏: –º–∞—Ç—Ä–∏—Ü–∞ ¬´–í–∞–∂–Ω–æ-–°—Ä–æ—á–Ω–æ¬ª', description: '–ö–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤—ã–¥–µ–ª—è—Ç—å –≥–ª–∞–≤–Ω–æ–µ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ ¬´–í–∞–∂–Ω–æ-–°—Ä–æ—á–Ω–æ¬ª' },
  { number: 4, title: '–ë–∞–∑–æ–≤—ã–π —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤', description: '–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–¥–µ–Ω–µ–≥' },
  { number: 5, title: '–°–æ–∑–¥–∞–Ω–∏–µ –£–¢–ü (–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)', description: '–§–æ—Ä–º—É–ª–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –ø–æ—à–∞–≥–æ–≤–æ' },
  { number: 6, title: 'Elevator Pitch: 1-–º–∏–Ω—É—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ', description: '–ö–∞–∫ –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É' },
  { number: 7, title: '–ú–∏–Ω–∏-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é (SMART)', description: '–°—Ç–∞–≤–∏–º SMART-—Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é: –ø—Ä–æ–¥–∞–∂–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ñ–∏–Ω–∞–Ω—Å—ã' },
  { number: 8, title: '–ë–ª–∏—Ü-–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤: 5 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤', description: '–ë—ã—Å—Ç—Ä–æ –≤—ã—è–≤–ª—è–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é' },
  { number: 9, title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–≤—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç', description: '–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è —Å—Ç–∞—Ä—Ç–∞' },
  { number: 10, title: '–ú–æ—è –∫–∞—Ä—Ç–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π', description: '–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –∏–∑—É—á–µ–Ω–Ω–æ–µ: —Ü–µ–ª–∏, –£–¢–ü, –æ–ø—Ä–æ—Å—ã, –±–∞–∑–æ–≤—ã–π —É—á—ë—Ç, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã' }
]

// –ù–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –ø—É–±–ª–∏—á–Ω—ã—Ö Vimeo ID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–±—É–¥—É—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)
const demoVideoIds = ['76979871', '148751763', '394233151']

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
 */
function generateLevelQuestions(levelNumber: number) {
  const levelTag = `level-${levelNumber}`
  const questions: any[] = []

  // 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (MULTIPLE_CHOICE)
  questions.push({
    uid: `${levelTag}-intro`,
    type: 'MULTIPLE_CHOICE',
    title: `–í–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è ${levelNumber}`,
    question: '–ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤—ã–º –±–∏–∑–Ω–µ—Å-–∑–Ω–∞–Ω–∏—è–º?',
    answers: ['–î–∞, –≥–æ—Ç–æ–≤—ã!', '–ü–æ–∫–∞ –Ω–µ—Ç'],
    correctAnswer: 0,
    tags: [levelTag, 'intro', 'test'],
    slug: `${levelTag}-intro`,
  })

  // 2-4. –¢—Ä–∏ –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∞
  for (let i = 1; i <= 3; i++) {
    const videoId = demoVideoIds[(i - 1) % demoVideoIds.length]
    questions.push({
      uid: `${levelTag}-video-${i}`,
      type: 'VIDEO',
      title: `–£—Ä–æ–∫ ${i}: –í–∏–¥–µ–æ —É—Ä–æ–≤–Ω—è ${levelNumber}`,
      question: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ-—É—Ä–æ–∫ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏',
      videoId,
      tags: [levelTag, 'video-lesson'],
      slug: `${levelTag}-video-${i}`,
      hint: '–ó–∞–ø–∏—à–∏—Ç–µ 3 –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏–∑ –≤–∏–¥–µ–æ',
      resources: [{
        title: `–°–ª–∞–π–¥—ã —É—Ä–æ–∫–∞ ${i}`,
        url: `https://bizlevel.kz/resources/${levelTag}-video-${i}.pdf`,
      }]
    })
  }

  // 5-7. –¢—Ä–∏ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ
  for (let i = 1; i <= 3; i++) {
    questions.push({
      uid: `${levelTag}-test-${i}`,
      type: 'MULTIPLE_CHOICE',
      title: `–¢–µ—Å—Ç ${i}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è`,
      question: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞',
      answers: ['–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ A', '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ B', '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ C', '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ D'],
      correctAnswer: 0,
      hint: '–í—Å–ø–æ–º–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –≤–∏–¥–µ–æ',
      tags: [levelTag, 'test'],
      slug: `${levelTag}-test-${i}`,
    })
  }

  // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
  questions.push({
    uid: `${levelTag}-final-test`,
    type: 'MULTIPLE_CHOICE',
    title: `–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è ${levelNumber}`,
    question: '–ö–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è?',
    answers: [
      '–ß—ë—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã',
      '–û—Ç–ª–æ–∂—É –Ω–∞ –ø–æ—Ç–æ–º',
      '–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ',
      '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å'
    ],
    correctAnswer: 0,
    hint: '–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π',
    tags: [levelTag, 'test'],
    slug: `${levelTag}-final-test`,
    resources: [{
      title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–≤–Ω—è',
      url: `https://bizlevel.kz/resources/${levelTag}-materials.pdf`
    }]
  })

  return questions
}

async function seedLevels2to10() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º seed —É—Ä–æ–≤–Ω–µ–π 2‚Äì10')

  // –û–±—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
  const commonTags = ['video-lesson', 'test', 'intro']
  for (const tagName of commonTags) {
    await prisma.tag.upsert({ where: { name: tagName }, update: {}, create: { name: tagName } })
  }

  for (const level of levelsInfo) {
    const levelTag = `level-${level.number}`

    // –°–æ–∑–¥–∞—ë–º —Ç–µ–≥ —É—Ä–æ–≤–Ω—è
    await prisma.tag.upsert({ where: { name: levelTag }, update: {}, create: { name: levelTag } })

    const questions = generateLevelQuestions(level.number)

    for (let i = 0; i < questions.length; i++) {
      const q = questions[i]
      const prev = i > 0 ? questions[i - 1] : null
      const next = i < questions.length - 1 ? questions[i + 1] : null

      const createdQuestion = await prisma.questions.upsert({
        where: { slug: q.slug },
        update: {},
        create: {
          uid: q.uid,
          question: q.question,
          title: q.title,
          questionType: q.type,
          difficulty: 'BEGINNER',
          correctAnswer: q.type === 'MULTIPLE_CHOICE' ? q.correctAnswer.toString() : 'video_completed',
          codeSnippet: q.type === 'VIDEO' ? q.videoId : undefined,
          hint: q.hint,
          slug: q.slug,
          slugGenerated: true,
          questionDate: new Date().toISOString().split('T')[0],
          previousQuestionSlug: prev?.slug,
          nextQuestionSlug: next?.slug,
        }
      })

      // –û—Ç–≤–µ—Ç—ã –¥–ª—è MULTIPLE_CHOICE
      if (q.type === 'MULTIPLE_CHOICE' && q.answers) {
        for (const answer of q.answers) {
          try {
            await prisma.questionAnswers.create({
              data: { answer, questionUid: createdQuestion.uid }
            })
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          }
        }
      }

      // –†–µ—Å—É—Ä—Å—ã
      if (q.resources) {
        for (const res of q.resources) {
          try {
            await prisma.questionResources.create({
              data: { questionUid: createdQuestion.uid, resource: res.url, title: res.title }
            })
          } catch (e) {
            // –î—É–±–ª–∏–∫–∞—Ç —Ä–µ—Å—É—Ä—Å–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        }
      }

      // –¢–µ–≥–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
      const tagNames = q.tags as string[]
      for (const tagName of tagNames) {
        const tag = await prisma.tag.findUnique({ where: { name: tagName } })
        if (tag) {
          await prisma.questionTags.upsert({
            where: { questionId_tagId: { questionId: createdQuestion.uid, tagId: tag.uid } },
            update: {},
            create: { questionId: createdQuestion.uid, tagId: tag.uid }
          })
        }
      }

      console.log(`  ‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: ${q.slug}`)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º StudyPath ¬´business-basics¬ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      const sp = await prisma.studyPath.findUnique({ where: { slug: 'business-basics' } })
      if (sp) {
        const newSlugs = questions.map(q => q.slug)
        const mergedSlugs = Array.from(new Set([...sp.questionSlugs, ...newSlugs]))

        await prisma.studyPath.update({
          where: { uid: sp.uid },
          data: {
            questionSlugs: mergedSlugs,
            overviewData: {
              ...(sp.overviewData as any || {}),
              [`level-${level.number}`]: {
                title: level.title,
                description: level.description,
                questions: newSlugs
              }
            }
          }
        })
      }
    } catch (e) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å StudyPath –¥–ª—è —É—Ä–æ–≤–Ω—è ${level.number}:`, e)
    }

    console.log(`üéâ –£—Ä–æ–≤–µ–Ω—å ${level.number} (${level.title}) —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!`)
  }

  console.log('‚úÖ –í—Å–µ —É—Ä–æ–≤–Ω–∏ 2‚Äì10 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã')
}

export default seedLevels2to10

if (require.main === module) {
  seedLevels2to10()
    .catch((e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ seed —É—Ä–æ–≤–Ω–µ–π 2-10:', e)
      process.exit(1)
    })
    .finally(async () => {
      await prisma.$disconnect()
    })
} 