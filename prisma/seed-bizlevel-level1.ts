import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è BizLevel
const level1Questions = [
  // 1. –í–≤–µ–¥–µ–Ω–∏–µ
  {
    uid: 'welcome-to-business',
    type: 'MULTIPLE_CHOICE' as const,
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –±–∏–∑–Ω–µ—Å–∞!',
    question: '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è?',
    answers: ['–î–∞, –Ω–∞—á–Ω–µ–º!', '–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'],
    correctAnswer: 0,
    tags: ['level-1', 'business-basics'],
    slug: 'welcome-to-business',
  },
  
  // 2. –í–∏–¥–µ–æ 1
  {
    uid: 'business-model-intro',
    type: 'VIDEO' as const,
    title: '–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å?',
    question: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –æ —Ç–∏–ø–∞—Ö –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–µ–π',
    videoId: '123456789', // Vimeo ID
    tags: ['level-1', 'video-lesson', 'business-basics'],
    slug: 'business-model-intro',
    hint: '–ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–µ–π –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
    resources: [{
      title: '–ì–∏–¥ –ø–æ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—è–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      url: 'https://bizlevel.kz/resources/business-models-guide.pdf'
    }]
  },
  
  // 3. –¢–µ—Å—Ç –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ 1
  {
    uid: 'business-models-test-1',
    type: 'MULTIPLE_CHOICE' as const,
    title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π: –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏',
    question: '–ö–∞–∫–∞—è –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏?',
    answers: [
      '–†–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞',
      '–ü–æ–¥–ø–∏—Å–∫–∞',
      '–§—Ä–∏–ª–∞–Ω—Å',
      '–ê—É–∫—Ü–∏–æ–Ω'
    ],
    correctAnswer: 1,
    hint: '–ü–æ–¥—É–º–∞–π—Ç–µ –æ Netflix –∏–ª–∏ Spotify',
    tags: ['level-1', 'test', 'business-basics'],
    slug: 'business-models-test-1',
  },
  
  // 4. –í–∏–¥–µ–æ 2
  {
    uid: 'smart-goals-video',
    type: 'VIDEO' as const,
    title: '–£—Ä–æ–∫ 2: SMART-—Ü–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π',
    question: '–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ü–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏—è –≤ –±–∏–∑–Ω–µ—Å–µ',
    videoId: '987654321', // Vimeo ID
    tags: ['level-1', 'video-lesson', 'goal-setting'],
    slug: 'smart-goals-video',
    hint: '–ù–∞—É—á–∏—Ç–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ —Ü–µ–ª–∏',
    resources: [{
      title: '–®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SMART-—Ü–µ–ª–µ–π',
      url: 'https://bizlevel.kz/resources/smart-goals-template.pdf'
    }]
  },
  
  // 5. –¢–µ—Å—Ç –ø–æ —Ü–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏—é
  {
    uid: 'smart-goals-test',
    type: 'MULTIPLE_CHOICE' as const,
    title: '–¢–µ—Å—Ç: SMART-—Ü–µ–ª–∏',
    question: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é SMART-—Ü–µ–ª—å:',
    answers: [
      '–°–¥–µ–ª–∞—Ç—å –±–∏–∑–Ω–µ—Å —É—Å–ø–µ—à–Ω–µ–µ',
      '–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∫–æ—Ñ–µ –Ω–∞ 20% –∫ 1 –º–∞—è 2025',
      '–†–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      '–†–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'
    ],
    correctAnswer: 1,
    hint: 'SMART = –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è, –ò–∑–º–µ—Ä–∏–º–∞—è, –î–æ—Å—Ç–∏–∂–∏–º–∞—è, –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è, –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
    tags: ['level-1', 'test', 'goal-setting'],
    slug: 'smart-goals-test',
  },
  
  // 6. –í–∏–¥–µ–æ 3
  {
    uid: 'target-audience-video',
    type: 'VIDEO' as const,
    title: '–£—Ä–æ–∫ 3: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –∫–ª–∏–µ–Ω—Ç—ã',
    question: '–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –Ω–∞–π—Ç–∏ –∏ –ø–æ–Ω—è—Ç—å —Å–≤–æ—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é',
    videoId: '456789123', // Vimeo ID
    tags: ['level-1', 'video-lesson', 'business-basics'],
    slug: 'target-audience-video',
    hint: '–ò–∑—É—á–∏—Ç–µ –º–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
    resources: [{
      title: '–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
      url: 'https://bizlevel.kz/resources/audience-research-checklist.pdf'
    }]
  },
  
  // 7. –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç
  {
    uid: 'level-1-final-test',
    type: 'MULTIPLE_CHOICE' as const,
    title: '–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç: –û—Å–Ω–æ–≤—ã –±–∏–∑–Ω–µ—Å–∞',
    question: '–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–∏–∑–Ω–µ—Å–∞?',
    answers: [
      '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–∏ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é',
      '–ù–∞–π—Ç–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
      '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
      '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É'
    ],
    correctAnswer: 0,
    hint: '–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —à–∞–≥–∞–º–∏',
    tags: ['level-1', 'test', 'business-basics'],
    slug: 'level-1-final-test',
  },
]

async function seedLevel1() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–≤–Ω—è 1...')
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤
    const tagNames = ['level-1', 'business-basics', 'goal-setting', 'video-lesson', 'test']
    for (const tagName of tagNames) {
      await prisma.tag.upsert({
        where: { name: tagName },
        update: {},
        create: { name: tagName }
      })
    }
    console.log('‚úÖ –¢–µ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    for (let i = 0; i < level1Questions.length; i++) {
      const questionData = level1Questions[i]
      const prevQuestion = i > 0 ? level1Questions[i - 1] : null
      const nextQuestion = i < level1Questions.length - 1 ? level1Questions[i + 1] : null

      // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
      const question = await prisma.questions.upsert({
        where: { slug: questionData.slug },
        update: {},
        create: {
          uid: questionData.uid,
          question: questionData.question,
          title: questionData.title,
          questionType: questionData.type,
          difficulty: 'BEGINNER',
          correctAnswer: questionData.correctAnswer?.toString() || 'video_completed',
          codeSnippet: questionData.type === 'VIDEO' ? questionData.videoId : undefined,
          hint: questionData.hint,
          slug: questionData.slug,
          questionDate: new Date().toISOString().split('T')[0],
          previousQuestionSlug: prevQuestion?.slug,
          nextQuestionSlug: nextQuestion?.slug,
        }
      })

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è MULTIPLE_CHOICE –≤–æ–ø—Ä–æ—Å–æ–≤
      if (questionData.type === 'MULTIPLE_CHOICE' && questionData.answers) {
        for (const answer of questionData.answers) {
          await prisma.questionAnswers.create({
            data: {
              answer: answer,
              questionUid: question.uid
            }
          })
        }
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è VIDEO –≤–æ–ø—Ä–æ—Å–æ–≤
      if (questionData.resources) {
        for (const resource of questionData.resources) {
          await prisma.questionResources.create({
            data: {
              questionUid: question.uid,
              resource: resource.url,
              title: resource.title
            }
          })
        }
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
      for (const tagName of questionData.tags) {
        const tag = await prisma.tag.findUnique({ where: { name: tagName } })
        if (tag) {
          await prisma.questionTags.upsert({
            where: {
              questionId_tagId: {
                questionId: question.uid,
                tagId: tag.uid
              }
            },
            update: {},
            create: {
              questionId: question.uid,
              tagId: tag.uid
            }
          })
        }
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å: ${questionData.title}`)
    }

    console.log('üéâ Seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–≤–Ω—è 1 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${level1Questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`)
    console.log('üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–≤–Ω—è:')
    console.log('   - 1 –≤–≤–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
    console.log('   - 3 –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞ (VIDEO —Ç–∏–ø)')
    console.log('   - 3 —Ç–µ—Å—Ç–∞ (MULTIPLE_CHOICE —Ç–∏–ø)')
    console.log('   - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    console.log('   - –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ seed –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTechBlitzData() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏
    const techTags = ['javascript', 'react', 'python', 'coding', 'programming']
    
    for (const tagName of techTags) {
      const tag = await prisma.tag.findUnique({ where: { name: tagName } })
      if (tag) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏
        await prisma.questionTags.deleteMany({
          where: { tagId: tag.uid }
        })
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ–≥–∞
        await prisma.tag.delete({
          where: { uid: tag.uid }
        })
        
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–≥: ${tagName}`)
      }
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    
  } catch (error) {
    console.log('‚ÑπÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã')
  }
}

async function main() {
  await cleanupTechBlitzData()
  await seedLevel1()
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

export default main 