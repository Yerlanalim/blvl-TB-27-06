model Questions {
  uid                  String              @id @default(uuid())
  question             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  questionDate         String
  answerResource       String?
  correctAnswer        String
  codeSnippet          String?
  videoId             String?
  hint                 String?
  dailyQuestion        Boolean             @default(false)
  difficulty           QuestionDifficulty  @default(EASY)
  customQuestion       Boolean             @default(false)
  slug                 String?             @unique @default(uuid())
  slugGenerated        Boolean             @default(false)
  description          String?
  title                String?
  questionType         QuestionType        @default(MULTIPLE_CHOICE)
  expectedParams       Json?
  functionName         String?
  returnType           String?
  testCases            Json?
  nextQuestionSlug     String?
  previousQuestionSlug String?
  isPremiumQuestion    Boolean             @default(false)
  afterQuestionInfo    String?
  aiTimeToComplete     Int?
  videoUrl             String?
  userAnswers          Answers[]
  answers              QuestionAnswers[]
  QuestionResources    QuestionResources[]
  tags                 QuestionTags[]
  bookmarks            UserBookmarks[]
  linkedReports        StatisticsReport[] @relation("SharedQuestions")
}

model Tag {
  uid       String         @id @default(uuid())
  name      String         @unique
  questions QuestionTags[]
}

model QuestionTags {
  questionId String
  tagId      String
  question   Questions @relation(fields: [questionId], references: [uid], onDelete: Cascade)
  tag        Tag       @relation(fields: [tagId], references: [uid], onDelete: Cascade)

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

model QuestionAnswers {
  uid               String             @id @default(cuid())
  answer            String
  questionUid       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  isCodeSnippet     Boolean            @default(false)
  answerFullSnippet String?
  answerType        QuestionAnswerType @default(STANDARD)
  question          Questions          @relation(fields: [questionUid], references: [uid], onDelete: Cascade)
}

model Answers {
  uid           String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  timeTaken     Int?
  userAnswerUid String?
  correctAnswer Boolean          @default(false)
  userUid       String           @default("legacy_user")
  questionUid   String           @default("legacy_question")
  updatedAt     DateTime         @default(now())
  questionDate  String           @default("")
  difficulty    AnswerDifficulty @default(EASY)
  question      Questions        @relation(fields: [questionUid], references: [uid], onDelete: Cascade)
  user          Users            @relation(fields: [userUid], references: [uid], onDelete: Cascade)
}

model QuestionResources {
  uid         String    @id @default(cuid())
  questionUid String
  resource    String
  createdAt   DateTime  @default(now())
  title       String
  updatedAt   DateTime  @updatedAt
  question    Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade)
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
  BEGINNER
}

enum AnswerDifficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionAnswerType {
  PREFILL
  STANDARD
}

enum QuestionType {
  CODING_CHALLENGE
  MULTIPLE_CHOICE
  SIMPLE_MULTIPLE_CHOICE
  VIDEO
}
