import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import Link from 'next/link';
import { ArrowLeft, PlayCircle, FileQuestion, CheckCircle, Clock, Lock } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { getBusinessLevelBySlug } from '@/utils/constants/business-levels';
import { getQuestionsByTag } from '@/utils/data/questions/get-questions-by-tag';
import { cn } from '@/lib/utils';

interface PageProps {
  params: {
    slug: string;
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è SEO
export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const level = getBusinessLevelBySlug(params.slug);
  
  if (!level) {
    return {
      title: '–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω - BizLevel',
    };
  }

  return {
    title: `${level.title} - BizLevel`,
    description: level.description,
    keywords: ['–æ–±—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å—É', level.title.toLowerCase(), '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–±–∏–∑–Ω–µ—Å-–∫—É—Ä—Å—ã'],
  };
}

// TODO: –í –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const getUserLevelProgress = async (levelSlug: string): Promise<{
  completedLessons: number;
  currentLessonIndex: number;
}> => {
  // BIZLEVEL: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  if (levelSlug === 'level-1') {
    return {
      completedLessons: 3, // –ü—Ä–∏–º–µ—Ä: 3 —É—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      currentLessonIndex: 3, // –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫ - 4-–π (–∏–Ω–¥–µ–∫—Å 3)
    };
  }
  return {
    completedLessons: 0,
    currentLessonIndex: 0,
  };
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞
interface LessonCardProps {
  lesson: any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ getQuestionsByTag
  lessonNumber: number;
  status: 'completed' | 'current' | 'locked';
  estimatedTime: number;
}

function LessonCard({ lesson, lessonNumber, status, estimatedTime }: LessonCardProps) {
  const isAccessible = status !== 'locked';
  
  const getStatusIcon = () => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="size-5 text-green-500" />;
      case 'current':
        return <Clock className="size-5 text-blue-500" />;
      case 'locked':
        return <Lock className="size-5 text-gray-400" />;
    }
  };

  const getTypeIcon = () => {
    return lesson.questionType === 'VIDEO' 
      ? <PlayCircle className="size-5 text-purple-500" />
      : <FileQuestion className="size-5 text-orange-500" />;
  };

  const getTypeLabel = () => {
    return lesson.questionType === 'VIDEO' ? '–í–∏–¥–µ–æ-—É—Ä–æ–∫' : '–¢–µ—Å—Ç';
  };

  const cardContent = (
    <Card className={cn(
      'transition-all duration-300 border border-black-50 bg-black-75',
      isAccessible ? 'hover:border-accent cursor-pointer' : 'opacity-60 cursor-not-allowed',
      status === 'current' && 'border-blue-500 bg-blue-500/5',
      status === 'completed' && 'border-green-500/50 bg-green-500/5'
    )}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 rounded-full bg-accent text-accent-foreground flex items-center justify-center font-bold text-sm">
              {lessonNumber}
            </div>
            <div className="flex flex-col">
              <h3 className="font-semibold text-base">{lesson.title}</h3>
              <div className="flex items-center gap-2 text-sm text-gray-400">
                {getTypeIcon()}
                <span>{getTypeLabel()}</span>
              </div>
            </div>
          </div>
          {getStatusIcon()}
        </div>
      </CardHeader>
      
      <CardContent className="pt-0">
        <div className="flex items-center justify-between text-sm text-gray-400">
          <div className="flex items-center gap-1">
            <Clock className="size-4" />
            <span>~{estimatedTime} –º–∏–Ω</span>
          </div>
          {status === 'completed' && (
            <Badge variant="secondary" className="text-green-500 border-green-500/20">
              –ó–∞–≤–µ—Ä—à–µ–Ω–æ
            </Badge>
          )}
          {status === 'current' && (
            <Badge variant="secondary" className="text-blue-500 border-blue-500/20">
              –¢–µ–∫—É—â–∏–π
            </Badge>
          )}
          {status === 'locked' && (
            <Badge variant="secondary" className="text-gray-400 border-gray-400/20">
              –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            </Badge>
          )}
        </div>
      </CardContent>
    </Card>
  );

  if (!isAccessible) {
    return cardContent;
  }

  return (
    <Link href={`/question/${lesson.slug}`} className="block">
      {cardContent}
    </Link>
  );
}

export default async function LevelPage({ params }: PageProps) {
  const level = getBusinessLevelBySlug(params.slug);
  
  if (!level) {
    notFound();
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
  const levelQuestionsData = await getQuestionsByTag(params.slug);
  
  // BIZLEVEL: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è:', {
    slug: params.slug,
    questionsDataLength: levelQuestionsData.length,
    questionsData: levelQuestionsData.map(tag => ({
      tagName: tag.name,
      questionsCount: tag.questions?.length || 0
    }))
  });
  
  const levelQuestions = levelQuestionsData
    .flatMap(tag => tag.questions.map(q => q.question))
    .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { completedLessons, currentLessonIndex } = await getUserLevelProgress(params.slug);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const progressPercentage = levelQuestions.length > 0 
    ? Math.round((completedLessons / levelQuestions.length) * 100)
    : 0;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
  const lessonsWithStatus = levelQuestions.map((lesson, index) => {
    let status: 'completed' | 'current' | 'locked';
    
    if (index < completedLessons) {
      status = 'completed';
    } else if (index === currentLessonIndex) {
      status = 'current';
    } else {
      status = 'locked';
    }

    return {
      ...lesson,
      status,
      estimatedTime: lesson.questionType === 'VIDEO' ? 10 : 5, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
    };
  });

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ */}
      <div className="mb-6">
        <Link 
          href="/levels" 
          className="inline-flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
        >
          <ArrowLeft className="size-4" />
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–≤–Ω—è–º
        </Link>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-full bg-accent text-accent-foreground flex items-center justify-center font-bold text-lg">
            {level.level}
          </div>
          <div>
            <h1 className="text-3xl font-bold">{level.title}</h1>
            <p className="text-gray-400">{level.description}</p>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è */}
        <div className="bg-black-75 border border-black-50 rounded-lg p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="text-sm text-gray-400">
              –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: {completedLessons} –∏–∑ {levelQuestions.length} —É—Ä–æ–∫–æ–≤
            </div>
            <div className="text-sm font-semibold text-accent">
              {progressPercentage}%
            </div>
          </div>
          <Progress value={progressPercentage} className="border border-black-50 bg-black-50" />
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ */}
      {levelQuestions.length > 0 ? (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold mb-4">–£—Ä–æ–∫–∏ —É—Ä–æ–≤–Ω—è</h2>
          {lessonsWithStatus.map((lesson, index) => (
            <LessonCard
              key={lesson.uid}
              lesson={lesson}
              lessonNumber={index + 1}
              status={lesson.status}
              estimatedTime={lesson.estimatedTime}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="bg-black-75 border border-black-50 rounded-lg p-8">
            <h3 className="text-lg font-semibold mb-2">–£—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è</h3>
            <p className="text-gray-400 mb-4">
              –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            </p>
            <Link href="/levels">
              <Button variant="secondary">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–≤–Ω—è–º
              </Button>
            </Link>
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      <div className="mt-12">
        <div className="bg-black-75 border border-black-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-3">üí° –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫–∏?</h3>
          <div className="space-y-2 text-sm text-gray-400">
            <p>‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ - –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ</p>
            <p>‚Ä¢ –í–∏–¥–µ–æ-—É—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã</p>
            <p>‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ</p>
            <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º</p>
          </div>
        </div>
      </div>
    </div>
  );
} 