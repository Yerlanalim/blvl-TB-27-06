'use client';

import { Progress } from '@/components/ui/progress';
import { motion } from 'framer-motion';
import { useEffect, useState } from 'react';
import { PlayCircle, FileQuestion, Trophy } from 'lucide-react';

interface LevelProgressProps {
  progress: {
    current: number;
    total: number;
    level: string;
    percentage: number;
    videosCompleted?: number;
    totalVideos?: number;
    testsCompleted?: number;
    totalTests?: number;
    estimatedTimeRemaining?: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  };
  className?: string;
}

/**
 * BIZLEVEL: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –≤–∏–¥–µ–æ/—Ç–µ—Å—Ç—ã, –≤—Ä–µ–º—è, –∞–Ω–∏–º–∞—Ü–∏–∏
 */
export default function LevelProgress({ progress, className = '' }: LevelProgressProps) {
  const [showConfetti, setShowConfetti] = useState(false);
  const [animatedPercentage, setAnimatedPercentage] = useState(0);
  
  const levelDisplayName = progress.level.replace('level-', '–£—Ä–æ–≤–µ–Ω—å ');
  const isCompleted = progress.percentage >= 100;

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimatedPercentage(progress.percentage);
    }, 100);
    return () => clearTimeout(timer);
  }, [progress.percentage]);

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
  useEffect(() => {
    if (isCompleted && progress.percentage === 100) {
      setShowConfetti(true);
      const timer = setTimeout(() => setShowConfetti(false), 3000);
      return () => clearTimeout(timer);
    }
  }, [isCompleted, progress.percentage]);

  // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—è
  const confettiParticles = Array.from({ length: 20 }, (_, i) => (
    <motion.div
      key={i}
      className="absolute w-2 h-2 bg-accent rounded-full"
      initial={{ 
        x: 0, 
        y: 0, 
        opacity: 1,
        scale: 1 
      }}
      animate={{
        x: (Math.random() - 0.5) * 200,
        y: Math.random() * -100 - 50,
        opacity: 0,
        scale: 0,
        rotate: Math.random() * 360
      }}
      transition={{
        duration: 2,
        delay: i * 0.1,
        ease: "easeOut"
      }}
    />
  ));

  return (
    <div className={`flex flex-col gap-2 relative ${className}`}>
      {/* –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
      {showConfetti && (
        <div className="absolute inset-0 pointer-events-none overflow-hidden">
          {confettiParticles}
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è */}
      <div className="flex items-center justify-between text-sm">
        <span className="text-gray-300 font-medium">
          {levelDisplayName}
        </span>
        <motion.span 
          className="text-accent font-bold"
          animate={{ scale: animatedPercentage !== progress.percentage ? [1, 1.1, 1] : 1 }}
          transition={{ duration: 0.3 }}
        >
          {Math.round(animatedPercentage)}%
        </motion.span>
      </div>

      {/* –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="flex items-center justify-between text-xs md:text-sm">
        <div className="flex items-center gap-3 md:gap-4">
          {/* –í–∏–¥–µ–æ –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          {progress.totalVideos && (
            <div className="flex items-center gap-1">
              <PlayCircle className="w-3 h-3 md:w-4 md:h-4 text-blue-400" />
              <span className="text-gray-300">
                –í–∏–¥–µ–æ: {progress.videosCompleted || 0}/{progress.totalVideos}
              </span>
            </div>
          )}
          
          {/* –¢–µ—Å—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          {progress.totalTests && (
            <div className="flex items-center gap-1">
              <FileQuestion className="w-3 h-3 md:w-4 md:h-4 text-green-400" />
              <span className="text-gray-300">
                –¢–µ—Å—Ç—ã: {progress.testsCompleted || 0}/{progress.totalTests}
              </span>
            </div>
          )}
        </div>

        {/* –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è */}
        {progress.estimatedTimeRemaining && progress.estimatedTimeRemaining > 0 && (
          <span className="text-gray-400 text-xs">
            ~{progress.estimatedTimeRemaining} –º–∏–Ω
          </span>
        )}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        <Progress 
          value={animatedPercentage} 
          className="h-2 md:h-3 bg-black-75"
          indicatorColor="bg-accent transition-all duration-500 ease-out"
        />
      </motion.div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ */}
      <motion.div 
        className="text-xs md:text-sm"
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3, delay: 0.2 }}
      >
        {isCompleted ? (
          <div className="flex items-center gap-2 text-accent font-medium">
            <Trophy className="w-4 h-4" />
            <span>–£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ</span>
          </div>
        ) : (
          <span className="text-gray-400">
            –£—Ä–æ–∫ {progress.current} –∏–∑ {progress.total} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {progress.total - progress.current}
          </span>
        )}
      </motion.div>
    </div>
  );
} 