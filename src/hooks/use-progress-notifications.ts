import { useCallback, useRef } from 'react';
import { toast } from 'sonner';
import { Trophy, CheckCircle, Flame, Target } from 'lucide-react';

// BIZLEVEL: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
interface ProgressNotificationOptions {
  debounceMs?: number;
  showOnlyOnce?: boolean;
}

interface NotificationState {
  lastShown: number;
  count: number;
}

const DEFAULT_DEBOUNCE_MS = 1000;
const STORAGE_KEY_PREFIX = 'bizlevel_notification_';

/**
 * –•—É–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
 * –í–∫–ª—é—á–∞–µ—Ç –¥–µ–±–∞—É–Ω—Å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫–∞–∑–æ–≤
 */
export function useProgressNotifications(options: ProgressNotificationOptions = {}) {
  const { debounceMs = DEFAULT_DEBOUNCE_MS, showOnlyOnce = false } = options;
  const notificationStates = useRef<Map<string, NotificationState>>(new Map());

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const checkAndUpdateNotificationState = useCallback((key: string): boolean => {
    const now = Date.now();
    const state = notificationStates.current.get(key) || { lastShown: 0, count: 0 };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–±–∞—É–Ω—Å–∞
    if (now - state.lastShown < debounceMs) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (showOnlyOnce && state.count > 0) {
      return false;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    notificationStates.current.set(key, {
      lastShown: now,
      count: state.count + 1,
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if (showOnlyOnce) {
      localStorage.setItem(`${STORAGE_KEY_PREFIX}${key}`, JSON.stringify(state));
    }

    return true;
  }, [debounceMs, showOnlyOnce]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  const loadNotificationState = useCallback((key: string) => {
    if (showOnlyOnce) {
      try {
        const saved = localStorage.getItem(`${STORAGE_KEY_PREFIX}${key}`);
        if (saved) {
          const state = JSON.parse(saved);
          notificationStates.current.set(key, state);
        }
      } catch (error) {
        console.warn('Failed to load notification state:', error);
      }
    }
  }, [showOnlyOnce]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
   */
  const showLessonComplete = useCallback((lessonName: string, lessonType: 'video' | 'test' = 'test') => {
    const key = `lesson_complete_${lessonName}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    const icon = lessonType === 'video' ? 'üìπ' : 'üìù';
    const message = lessonType === 'video' 
      ? `–í–∏–¥–µ–æ-—É—Ä–æ–∫ "${lessonName}" –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω!` 
      : `–¢–µ—Å—Ç "${lessonName}" –∑–∞–≤–µ—Ä—à–µ–Ω!`;

    toast.success(message, {
      icon: <CheckCircle className="w-4 h-4 text-green-500" />,
      description: `${icon} –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.`,
      duration: 4000,
      className: 'bg-black-75 border-green-500/20',
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
   */
  const showLevelComplete = useCallback((levelName: string) => {
    const key = `level_complete_${levelName}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    toast.success(`–£—Ä–æ–≤–µ–Ω—å "${levelName}" –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ`, {
      icon: <Trophy className="w-4 h-4 text-yellow-500" />,
      description: 'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.',
      duration: 6000,
      className: 'bg-black-75 border-yellow-500/20',
      action: {
        label: '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å',
        onClick: () => {
          // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
          console.log('Navigate to next level');
        },
      },
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
   */
  const showAchievement = useCallback((achievementName: string, rarity: 'common' | 'rare' | 'epic' | 'legendary' = 'common') => {
    const key = `achievement_${achievementName}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    const rarityEmoji = {
      common: 'ü•â',
      rare: 'ü•à', 
      epic: 'ü•á',
      legendary: 'üíé'
    };

    const rarityColor = {
      common: 'text-gray-500',
      rare: 'text-blue-500',
      epic: 'text-purple-500',
      legendary: 'text-yellow-500'
    };

    toast.success(`–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievementName}! üèÜ`, {
      icon: <Trophy className={`w-4 h-4 ${rarityColor[rarity]}`} />,
      description: `${rarityEmoji[rarity]} –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è "${rarity}".`,
      duration: 8000,
      className: 'bg-black-75 border-accent/20',
      action: {
        label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        onClick: () => {
          // TODO: –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          console.log('Navigate to achievements');
        },
      },
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
   */
  const showWelcomeBack = useCallback((daysAway: number) => {
    const key = `welcome_back_${new Date().toDateString()}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    let message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—É—á–µ–Ω–∏–µ? üí™';
    let description = '–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–∑—É—á–∞—Ç—å –±–∏–∑–Ω–µ—Å –≤–º–µ—Å—Ç–µ!';

    if (daysAway > 1) {
      message = `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—Å –Ω–µ –±—ã–ª–æ ${daysAway} –¥–Ω–µ–π.`;
      description = '–í—Ä–µ–º—è –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å —É–ø—É—â–µ–Ω–Ω–æ–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ!';
    }

    toast(message, {
      icon: <Target className="w-4 h-4 text-accent" />,
      description,
      duration: 5000,
      className: 'bg-black-75 border-accent/20',
      action: {
        label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        onClick: () => {
          // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É
          console.log('Navigate to current lesson');
        },
      },
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
   */
  const showStreakNotification = useCallback((streakDays: number) => {
    const key = `streak_${streakDays}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    let message = `–°–µ—Ä–∏—è ${streakDays} –¥–Ω–µ–π! üî•`;
    let description = '–û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.';

    if (streakDays >= 7) {
      message = `–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è ${streakDays} –¥–Ω–µ–π! üî•üî•`;
      description = '–í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞!';
    }

    toast.success(message, {
      icon: <Flame className="w-4 h-4 text-orange-500" />,
      description,
      duration: 5000,
      className: 'bg-black-75 border-orange-500/20',
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  const showMotivationalMessage = useCallback((type: 'encouragement' | 'tip' | 'reminder' = 'encouragement') => {
    const key = `motivational_${type}_${new Date().toDateString()}`;
    loadNotificationState(key);
    
    if (!checkAndUpdateNotificationState(key)) return;

    const messages = {
      encouragement: [
        '–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É! üöÄ',
        '–í—ã –¥–µ–ª–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏! üí™',
        '–ó–Ω–∞–Ω–∏—è - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –±—É–¥—É—â–µ–µ! üìà',
      ],
      tip: [
        '–°–æ–≤–µ—Ç: –î–µ–ª–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ-—É—Ä–æ–∫–æ–≤! üìù',
        '–°–æ–≤–µ—Ç: –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ! üéØ',
        '–°–æ–≤–µ—Ç: –û–±—Å—É–∂–¥–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–Ω–æ–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º–∏! üí¨',
      ],
      reminder: [
        '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª! üîÑ',
        '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! ‚è∞',
        '–ü—Ä–∞–∫—Ç–∏–∫–∞ - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è! üõ†Ô∏è',
      ],
    };

    const messageList = messages[type];
    const randomMessage = messageList[Math.floor(Math.random() * messageList.length)];

    toast(randomMessage, {
      icon: <Target className="w-4 h-4 text-accent" />,
      duration: 4000,
      className: 'bg-black-75 border-accent/20',
    });
  }, [checkAndUpdateNotificationState, loadNotificationState]);

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  const clearNotificationStates = useCallback(() => {
    notificationStates.current.clear();
    
    // –û—á–∏—Å—Ç–∫–∞ localStorage
    const keys = Object.keys(localStorage).filter(key => key.startsWith(STORAGE_KEY_PREFIX));
    keys.forEach(key => localStorage.removeItem(key));
  }, []);

  return {
    showLessonComplete,
    showLevelComplete,
    showAchievement,
    showWelcomeBack,
    showStreakNotification,
    showMotivationalMessage,
    clearNotificationStates,
  };
} 